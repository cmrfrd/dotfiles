#! /usr/bin/env nix-shell
#! nix-shell --quiet -p unzip -i bash
#
# Script to run a command behind a vpn
#
set -e

## Download ovpn files if necessary
## default to protonvpn (because free)
VPN_ZIP_URL="https://account.protonvpn.com/api/vpn/config?Category=Server&Tier=0&Platform=Linux&Protocol=tcp"
OVPN_DIR=/tmp/ovpn
if [ ! -d "${OVPN_DIR}" ]
then
  mkdir -p ${OVPN_DIR}
  (curl -s $VPN_ZIP_URL --output ${OVPN_DIR}/ovpn.zip 1>&2) && \
  cd ${OVPN_DIR} && \
  (unzip -u ovpn.zip 1>&2) && \
  (rm ${OVPN_DIR}/ovpn.zip 1>&2)
fi

## Get file arg to determine location
FILE=${1}
if ! [[ -f $FILE ]]; then
   FILE=$(find ${OVPN_DIR} -type f -name "*.ovpn" | shuf -n 1)
else
   printf "Using file $FILE \n" 1>&2
   shift;
fi

## Build container
NAME=ovpn
cat << EOF > /tmp/Dockerfile.${NAME}
FROM alpine:3.12
RUN apk add --no-cache openvpn bash curl
# Just in case resolveconf https://github.com/alfredopalhares/openvpn-update-resolv-conf
RUN echo "#!/usr/bin/env bash" >> /etc/openvpn/update-resolv-conf && \
    chmod 0777 /etc/openvpn/update-resolv-conf
EOF
EMPTY=$(mktemp -d)
podman build -q -t ${NAME} -f /tmp/Dockerfile.${NAME} $EMPTY 1>&2 > /dev/null

## Vars
[ -v ${USERNAME} ] && printf 'Username var not provided ...\n' 1>&2 && exit 1;
[ -v ${PASSWORD} ] && printf 'Password var not provided ...\n' 1>&2 && exit 1;
CONTAINER_NAME=$(cat /dev/urandom | head -n 10 | sha1sum | cut -b-5)

## Catch and cleanup on failure
cleanup() {
  printf '\nExiting ...\n' 1>&2
  podman stop ${CONTAINER_NAME} -t 1 2>&1 > /dev/null
  podman rm ${CONTAINER_NAME} 2>&1 > /dev/null
  exit 1;
}
trap "cleanup" ERR
trap "cleanup" INT TERM

## Run vpn connect
tun="tunvpn"
podman run --rm --cap-add NET_ADMIN,NET_RAW --device /dev/net/tun \
       --name ${CONTAINER_NAME} \
       -v ${OVPN_DIR}:${OVPN_DIR} \
       -u $(id -u):$(id -g) \
       -it -d ${NAME} \
       bash -c "
       openvpn \
       --config $FILE \
       --auth-nocache \
       --auth-retry nointeract \
		   --dev $tun \
       --dev-type tun \
       --errors-to-stderr \
       --auth-user-pass <(echo -e '$USERNAME\n$PASSWORD') \
       " 1>&2

## Check running container
until [ "`podman inspect ${CONTAINER_NAME} | jq -r '.[0] | .State.Running'`"=="true" ]; do
    sleep 1;
    printf "Initializing container ...\n" 1>&2
done;

## Check vpn connection
PID=$(podman inspect ${CONTAINER_NAME} | jq -r '.[0] | .State.Pid')
while [ -n "$(nsenter -U -n -t $PID ip a show $tun up 2>&1 > /dev/null)" ]; do
  sleep 1;
  if [ -n "$(podman inspect ${CONTAINER_NAME})" ]; then
     printf "Waiting for $tun to be up ...\n" 1>&2
     :;
     if [ "$(podman ps -aq -f status=exited -f name=${CONTAINER_NAME})" ]; then
       printf "Error uh oh ...\n" 1>&2
       podman logs ${CONTAINER_NAME} 1>&2
       cleanup;
     fi
  else
    printf "${CONTAINER_NAME} failed during creation ...\n";
    cleanup;
  fi
done
printf "Connected ...\n" 1>&2

## Run command and cleanup
# nsenter -U -n -t $PID -- nsenter -S $(id -u) -G $(id -g) -m -t $$ $@
# nsenter -U -S $(id -u) -G $(id -G) -n -t $PID $@
nsenter -U -n -t $PID $@
cleanup
